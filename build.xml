<project name="gearman-java" default="usage" basedir=".">
    <property name="project.version" value="0.02"/>
    <property name="src.dir" location="./src" />
    <property name="test.src.dir" location="./test" />
    <property name="build.dir" location="./build" />
    <property name="build.classes.dir" location="${build.dir}/classes" />
    <property name="build.tests.dir" location="${build.dir}/tests" />
    <property name="dist.dir" location="${build.dir}/../dist" />
    <property name="dist.lib.dir" location="${dist.dir}/lib" />
    <property name="build.docs.dir" location="${build.dir}/javadocs" />
    <property name="dist.docs.dir" location="${dist.dir}/docs" />
    <property name="dist.jar" location="${dist.lib.dir}/${ant.project.name}-${project.version}.jar"/>
    <property name="api.pkg" value="org.gearman"/>
    <property name="pmd.home" value="${user.home}/.ant/lib/pmd"/>
    <property name="findbugs.home" value="${user.home}/.ant/lib/findbugs"/>

    <path id="build.classpath">
        <pathelement location="${build.classes.dir}" />
    </path>
    <path id="test.classpath">
        <pathelement location="${dist.jar}" />
        <pathelement location="${build.tests.dir}"/>
        <pathelement location="${junit.jar}" />
    </path>

    <path id="pmd.lib.search.path">
        <pathelement path="${pmd.home}/lib/"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="lib/pmd/lib/"/>
    </path>

    <path id="findbugs.lib.search.path">
        <pathelement path="${findbugs.home}/lib/"/>
        <pathelement path="${java.class.path}"/>
        <pathelement path="lib/findbugs/lib/"/>
    </path>

    <target name="-check_pmd" description="Check that pmd jar files are present">
        <available file="pmd.jar" type="file" property="pmd.jar.present">
            <filepath refid="pmd.lib.search.path"/>
        </available>
        <fail unless="pmd.jar.present" message="Please install pmd.jar in lib-directory  (or in ant classpath) to run PMD."/>
    </target>

    <target name="pmd" depends="compile, -check_pmd" description="Check the code with PMD">
        <path id="pmd.lib" >
            <pathelement location="${pmd.home}/lib/pmd.jar"/>
            <pathelement location="${pmd.home}/lib/jaxen.jar"/>
        </path>
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.lib"/>
        <mkdir dir="build/pmd"/>
        <pmd targetjdk="1.5" failuresPropertyName="pmd.num.warnings" rulesetfiles="tools/pmd/ruleset.xml">
            <formatter type="html" toFile="build/pmd/report.html"/>
            <formatter type="xml" toFile="build/pmd/report.xml"/>
            <fileset dir="src" includes="**/*.java"/>
        </pmd>
        <echo message="PMD finished, found ${pmd.num.warnings} warnings, see build/pmd/pmd_report.html"/>
    </target>

    <target name="-check_findbugs" description="Check that findbugs jar files are present">
        <available file="findbugs.jar" type="file" property="findbugs.jar.present">
            <filepath refid="findbugs.lib.search.path"/>
        </available>
        <fail unless="findbugs.jar.present" message="Could not find findbugs.jar"/>

        <available file="findbugs-ant.jar" type="file" property="findbugs-ant.jar.present">
            <filepath refid="findbugs.lib.search.path"/>
        </available>
        <fail unless="findbugs-ant.jar.present" message="Could not find findbugs-ant.jar"/>
    </target>

    <target name="findbugs" depends="dist, -check_findbugs" description="Check the code with Findbugs">
        <path id="findbugs.lib" >
            <pathelement location="${findbugs.home}/lib/findbugs.jar"/>
            <pathelement location="${findbugs.home}/lib/findbugs-ant.jar"/>
        </path>
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.lib"/>
        <mkdir dir="build/findbugs"/>
        <findbugs projectname="${ant.project.name}-${project.version}" home="${findbugs.home}" output="xml" outputFile="build/findbugs/findbugs.xml">
            <sourcePath path="src" />
            <class location="${dist.jar}" />
        </findbugs>
    </target>


    <target name="usage">
        <echo message="Build the ${ant.project.name} project."/>
        <echo message=""/>
        <echo message="This build system support the follow targets:"/>
        <echo message=""/>
        <echo message="help:     display this help message."/>
        <echo message=""/>
        <echo message="compile:  builds the project source files."/>
        <echo message=""/>
        <echo message="dist:     generates the project jar file and javadocs."/>
        <echo message=""/>
        <echo message="findbugs: generates the project jar file and runs findbugs."/>
        <echo message=""/>
        <echo message="test:     builds the jar file and testsuite. Runs the regression tests"/>
        <echo message="          against the built jar. Requires Junit 4.6 to be on classpath"/>
        <echo message="          or specified via the junit.jar property (-Djunit.jar)"/>
        <echo message=""/>
        <echo message="pmd:     builds the jar file and run pmd scan"/>
        <echo message=""/>
        <echo message="clean:   removes the built classes, jar files and test results"/>
        <echo message=""/>
    </target>


    <!-- removes ./build dir -->
    <target name="clean">
        <delete dir="${dist.dir}" quiet="true" />
        <delete dir="${build.dir}" quiet="true" />
    </target>

    <!-- Prep the build dir -->
    <target name="init">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${build.tests.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.lib.dir}" />
        <mkdir dir="${build.docs.dir}" />
        <mkdir dir="${dist.docs.dir}" />
    </target>

    <!-- build it -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true">
                <!--Turned off checked warnings for now, because GearmanClientImpl will fail -->
                <!--to compile with warnings even though we are using @supprress annotation -->
        	<compilerarg value="-Xlint:-unchecked"/>
        </javac>
    </target>

    <!-- generate javadocs -->
    <target name="javadoc" depends="compile">
        <delete failonerror="false">
            <fileset dir="${build.docs.dir}" />
        </delete>
        <javadoc sourcepath="${src.dir}"
                    destdir="${build.docs.dir}"
                    packagenames= "org.gearman.*"
                    author= "true"
                    private="true"
                    version="true"
                    classpathref="build.classpath"
                    defaultexcludes="yes"
                    use="true"
                    windowtitle="Gearman Java Library API documentation"
                    doctitle="&lt;h1&gt;Gearman Java Library documentation &lt;/h1&gt;">
        </javadoc>
    </target>

    <!-- build jar file -->
    <target name="dist" depends="compile,javadoc">
        <jar jarfile="${dist.jar}" basedir="${build.classes.dir}"/>
        <jar jarfile="${dist.docs.dir}/${ant.project.name}-${project.version}-javadocs.jar" basedir="${build.docs.dir}"/>
    </target>

    <!-- build junit tests -->
    <target name="compileTests" depends="dist">
        <javac srcdir="${test.src.dir}" destdir="${build.tests.dir}" classpathref="test.classpath" debug="true" />
    </target>

    <!-- Run junit tests. Requires that junit.jar be on the CLASSPATH or    -->
    <!-- the property ${junit.jar} be set to point to the path for the      -->
    <!-- junit.jar file. Some of the tests may require that a gearmaand     -->
    <!-- instance be running and listening on the default port.             -->
    <target name="test" depends="compileTests">
        <mkdir dir="${build.tests.dir}/results" />
        <junit printsummary="true" failureproperty="junit.failure">
            <formatter type="plain"/>
            <classpath refid="test.classpath" />
            <batchtest todir="${build.tests.dir}/results">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test*.java" />
                    <exclude name="**/TestUtil.java" />
                </fileset>
            </batchtest>
        </junit>
        <fail if="junit.failure" message="One or more unit tests failed. See ${build.tests.dir}/results for details."/>
    </target>
</project>
